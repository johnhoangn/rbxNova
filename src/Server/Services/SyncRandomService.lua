-- SyncRandomService server
-- Creates and manages synchronized random number generation with the client
-- Validation is done per generation
--
-- Dynamese (Enduo)
-- 07.22.2021



local SyncRandomService = {Priority = 450}
local Network
local HttpService

local GlobalRandom
local ActiveRandoms


-- Creates a new synchronized random
-- @param seed <number> == nil, optional seed
-- @param uid <string> == nil, optional uid (for replacing old seeds)
-- @returns <string> <float>
function SyncRandomService:NewSyncRandom(seed, uid)
    seed = seed or GlobalRandom:NextNumber()
    uid = uid or HttpService:GenerateGUID()

    local rand = {
        Object = Random.new(seed);
        Generated = 0;
    }

    ActiveRandoms:Add(uid, rand)

    return uid, seed
end


-- Replaces a random object
-- @param uid <string>
-- @returns <number>
function SyncRandomService:FixRandom(uid)
    ActiveRandoms:Remove(uid)
    local _uid, seed = self:NewSyncRandom(nil, uid)
    return seed
end


-- Generates a new number
-- @param uid <string>
-- @param user <Player>
-- @param clientNum <number>, the random number generated by the client
-- @returns <float>
function SyncRandomService:NextNumber(uid, user, clientNum)
    local rand = ActiveRandoms:Get(uid)

    if (rand == nil) then
        warn("Nil rand", user)
        return 0
    end

    local number = rand.Object:NextNumber()

    if (number == clientNum) then
        rand.Generated += 1
    else
        local seed = self:FixRandom(uid)
        number = ActiveRandoms:Get(uid).Object:NextNumber()
        Network:FireClient(user,
            Network:Pack(
                Network.NetProtocol.Forget,
                Network.NetRequestType.RandomOverwrite,
                uid, seed
            )
        )
    end

    return number
end


-- Generate a new integer
-- @param uid <string>
-- @param lower <integer>
-- @param upper <integer>
-- @param user <Player>
-- @param clientNum <number>, the random number generated by the client
-- @returns <integer>
function SyncRandomService:NextInteger(uid, lower, upper, user, clientNum)
    local rand = ActiveRandoms:Get(uid)

    if (rand == nil) then
        warn("Nil rand", user)
        return 0
    end

    local number = rand.Object:NextInteger(lower, upper)

    if (number == clientNum) then
        rand.Generated += 1
    else
        local seed = self:FixRandom(uid)
        number = ActiveRandoms:Get(uid).Object:NextInteger(lower, upper)
        Network:FireClient(user,
            Network:Pack(
                Network.NetProtocol.Forget,
                Network.NetRequestType.RandomOverwrite,
                uid, seed
            )
        )
    end

    return number
end


function SyncRandomService:EngineInit()
    Network = self.Services.Network
    HttpService = self.RBXServices.HttpService

    GlobalRandom = Random.new() -- random for random!
	ActiveRandoms = self.Classes.IndexedMap.new()
end


function SyncRandomService:EngineStart()
    Network:HandleRequestType(Network.NetRequestType.RandomRequest, function(user, dt)
        return self:NewSyncRandom(nil)
    end)
end


return SyncRandomService